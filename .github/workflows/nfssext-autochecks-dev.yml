# nfssext-autochecks-dev.yml
# standard l3build testing for packages in nfssext repo with LaTeX dev format

# https://github.com/latex3/hyperref/blob/adc36adbc3650db73329469b43afb0ee86e3c807/.github/workflows/main.yaml
# https://github.com/josephwright/siunitx/blob/main/.github/workflows/main.yaml

name: Automatic Checks for nfssext with LaTeX dev

# Controls when the workflow will run
on:
  schedule: 
    - cron: '17 2 * * *'
  push:
    branches:
      - "*"
    paths:
      - '.github/workflows/nfssext-autochecks-dev.yml'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # update TL tree if needed
  texlive-cache:
    runs-on: ubuntu-latest
    name: Update TeX Live cache
    outputs: 
      cache_key: ${{ steps.texlive.outputs.cache_key }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install TeX Live
        id: texlive
        uses: zauguin/install-texlive@v4
        with:
          # List the required TeX Live packages in a separate file to allow reuse in
          # different workflows.
          package_file: .github/tl_packages

  clm-dev:
    if: ${{ !cancelled() }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "Test build: cfr-lm"
    needs: texlive-cache
    # nfssext-cfr uses cfr-lm (though it falls back if built first)
    # cfr-lm uses nfssext-cfr but there's nothing to build
    outputs:
      # clm_cache_key: ${{ steps.clm-cache-dev.outputs.cache_key }}
      clm_cache_key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}-dev
      fnttarg_clm_output: ${{ steps.fnttarg-clm-dev.outputs.build_ret_clm }}
      ctan_clm_output: ${{ steps.ctan-clm-dev.outputs.ctan_ret_clm }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Restore clm dev from cache
        id: clm-dev-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/nfssext/cfr-lm/keep
          lookup-only: true
          fail-on-cache-miss: false
          key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}-dev
      # https://github.com/josephwright/siunitx/blob/549cad913591b92a3a199b7477a325866303bf29/.github/workflows/main.yaml
      # We need Ghostscript for XeTeX tests.
      - run: sudo apt-get update #&& sudo apt-get install ghostscript 
        shell: bash
        if: ${{ !cancelled() && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
      # Steps represent a sequence of tasks that will be executed as part of the job
      - name: Restore TeX Live from cache
        if: ${{ !cancelled() && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        uses: actions/cache/restore@v4
        with: 
          path: ~/texlive
          key: ${{ needs.texlive-cache.outputs.cache_key }}
          fail-on-cache-miss: true
      # oes angen hwn?
      # oes!
      - name: Set PATH
        if: ${{ !cancelled() && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        shell: bash
        run: echo $HOME/texlive/bin/x86_64-linux >> $GITHUB_PATH
      - name: Run l3build fnttarg dev
        id: fnttarg-clm-dev
        working-directory: cfr-lm
        if: ${{ !cancelled() }} 
        shell: bash
        # run: (l3build fnttarg && echo "BUILD_RET=0" >> "$GITHUB_OUTPUT") || echo "BUILD_RET=1" >> "$GITHUB_OUTPUT"
        run: |
          cachehit="${{ steps.clm-dev-restore.outputs.cache-hit }}"
          allan=0
          if [ "${cachehit}" != "true" ] 
          then
            l3build fnttarg --dev || allan=1
          fi
          echo -e "build_ret_clm=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed build output
      # run iff previous step failed
        if: ${{ !cancelled() && steps.fnttarg-clm-dev.outcome == 'failure' && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: buildfiles-clm-dev
          path: build/fnt/*.log
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Run l3build ctan dev
      # run only if build succeeded
        if: ${{ !cancelled() && steps.fnttarg-clm-dev.outcome == 'success' && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        working-directory: cfr-lm
        id: ctan-clm-dev
        shell: bash
        run: | 
          cachehit="${{ steps.clm-dev-restore.outputs.cache-hit }}"
          allan=0
          if [ "${cachehit}" != "true" ] 
          then
            l3build ctan --dev || allan=1
          fi
          echo -e "ctan_ret_clm=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Run l3build install 
      # run only if ctan succeeded
        if: ${{ !cancelled() && steps.ctan-clm-dev.outcome == 'success' && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        shell: bash
        working-directory: cfr-lm
        id: install-clm-dev
        run: |
          allan=0
          l3build install || allan=1
          echo "INSTALL_RET=${allan}" >> "$GITHUB_OUTPUT" 
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Update map
      # run only if install succeeded
        if: ${{ !cancelled() && steps.install-clm-dev.outcome == 'success' && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        shell: bash
        id: updmap-clm-dev
        run: |
          allan=0
          updmap --user --enable Map=clm.map || allan=1
          echo "UPDMAP_RET=${allan}" >> "$GITHUB_OUTPUT" 
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed test output for clm
        # run even if previous step failed
        if: ${{ !cancelled() && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        uses: zauguin/l3build-failure-artifacts@v1
        with:
          name: testfiles-clm-dev
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Cache build results
      # run only if updmap succeeded
        if: ${{ !cancelled() && steps.updmap-clm-dev.outcome == 'success'  && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
        shell: bash
        id: clm-cache-dev
        uses: actions/cache/save@v4
        with:
          path: ~/nfssext/cfr-lm/keep
          key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}-dev
      - name: Archive docs
        if: ${{ !cancelled() && steps.clm-dev-restore.outputs.cache-hit != 'true' }}
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: docs-cfr-lm-dev
          path: cfr-lm/*.pdf
          # Decide how long to keep the test output artefact:
          retention-days: 30


  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # these do not depend on clm
  nfssext-dev:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: texlive-cache
    outputs:
      fnttarg_baskervaldadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_baskervaldadf }}
      fnttarg_berenisadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_berenisadf }}
      fnttarg_electrumadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_electrumadf }}
      fnttarg_librisadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_librisadf }}
      fnttarg_romandeadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_romandeadf }}
      fnttarg_venturisadf_output: ${{ steps.fnttarg-dev.outputs.build_ret_venturisadf }}
      ctan_baskervaldadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_baskervaldadf }}
      ctan_berenisadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_berenisadf }}
      ctan_electrumadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_electrumadf }}
      ctan_librisadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_librisadf }}
      ctan_romandeadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_romandeadf }}
      ctan_venturisadf_output: ${{ steps.ctan-dev.outputs.ctan_ret_venturisadf }}
    # don't abandon other builds if one module fails
    # continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # include indicates that we want to set explicitly these combinations
        # and don't want full matrix testing.
        include:
          - module: baskervaldadf
            working_directory: arkandis/baskervaldadf
            pre_target: fnttarg
          - module: berenisadf
            working_directory: arkandis/berenisadf
            # berenis needs make, ff
            extra_packages: make fontforge
            pre_target: fnttarg
          - module: electrumadf
            working_directory: arkandis/electrumadf
            pre_target: fnttarg
          - module: librisadf
            working_directory: arkandis/librisadf
            pre_target: fnttarg
          - module: romandeadf
            working_directory: arkandis/romandeadf
            pre_target: fnttarg
          - module: venturisadf
            working_directory: arkandis/venturisadf
            pre_target: fnttarg
    name: "Test build: ${{ matrix.module }}"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      # https://github.com/josephwright/siunitx/blob/549cad913591b92a3a199b7477a325866303bf29/.github/workflows/main.yaml
      - name: Update system 
        run: sudo apt-get update
      - name: Install additional packages if needed
        if: ${{ matrix.extra_packages }}
        run: sudo apt-get install ${{ matrix.extra_packages }}
      - name: Restore TeX Live from cache
        uses: actions/cache/restore@v4
        with:
          path: ~/texlive
          key: ${{ needs.texlive-cache.outputs.cache_key }}
          fail-on-cache-miss: true
        # oes angen hwn?
        # oes!
      - name: Set PATH
        run: echo $HOME/texlive/bin/x86_64-linux >> $GITHUB_PATH
      - name: Run l3build fnttarg dev
      # oes pwrpas ddefnyddio if yma? am fod bob un yn cynnwys pre_target yn y matrix hwn, ond ydyn nhw?
        if: ${{ matrix.pre_target }}
        working-directory: ${{ matrix.working_directory }}
        id: fnttarg-dev
        run: |
          module="${{ matrix.module }}"
          allan=0
          l3build fnttarg --dev || allan=1
          echo -e "build_ret_${module}=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed build output
      # run even iff previous step failed
        if: ${{ !cancelled() && steps.fnttarg-dev.outcome == 'failure' }}
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: buildfiles-${{ matrix.module }}-dev
          path: build/fnt/*.log
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Run l3build ctan dev
        working-directory: ${{ matrix.working_directory }}
        id: ctan-dev
        run: |
          module="${{ matrix.module }}"
          allan=0
          l3build ctan --dev || allan=0
          echo -e "ctan_ret_${module}=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed test output
      # run even if previous step failed
        if: ${{ !cancelled() }}
        uses: zauguin/l3build-failure-artifacts@v1
        with:
          name: testfiles-${{ matrix.module }}-dev
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Archive docs
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.module }}-dev
          path: ${{ matrix.working_directory }}/*.pdf
          # Decide how long to keep the test output artefact:
          retention-days: 30

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # need cfr-lm
  # we don't really need the variable doing it in a separate matrix ...
  # but leave for now as may be useful
  nfssext-needy-dev:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [ texlive-cache, clm-dev ]
    outputs:
      fnttarg_adforn_output: ${{ steps.fnttarg-dev.outputs.build_ret_adforn }}
      fnttarg_adfsymbols_output: ${{ steps.fnttarg-dev.outputs.build_ret_adfsymbols }}
      ctan_adforn_output: ${{ steps.ctan-dev.outputs.ctan_ret_adforn }}
      ctan_adfsymbols_output: ${{ steps.ctan-dev.outputs.ctan_ret_adfsymbols }}
      ctan_fontscripts_output: ${{ steps.ctan-dev.outputs.ctan_ret_fontscripts }}
      ctan_nfssext_cfr_output: ${{ steps.ctan-dev.outputs.ctan_ret_nfssext-cfr }}
    # don't abandon other builds if one module fails
    # continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # include indicates that we want to set explicitly these combinations
        # and don't want full matrix testing.
        include:
          - module: adforn
            working_directory: arkandis/adforn
            pre_target: fnttarg
            extra_needs: clm-dev
          - module: adfsymbols
            working_directory: arkandis/adfsymbols
            pre_target: fnttarg
            extra_needs: clm-dev
          - module: fontscripts
            working_directory: fontscripts
            extra_needs: clm-dev
          - module: nfssext-cfr
            working_directory: nfssext-cfr
            extra_needs: clm-dev
    name: "Test build: ${{ matrix.module }}"
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      # https://github.com/josephwright/siunitx/blob/549cad913591b92a3a199b7477a325866303bf29/.github/workflows/main.yaml
      # We need Ghostscript for XeTeX tests.
      - name: Update system 
        run: sudo apt-get update
      - name: Install additional packages if needed
        if: ${{ matrix.extra_packages }}
        run: sudo apt-get install ${{ matrix.extra_packages }}
      - name: Restore TeX Live from cache
        uses: actions/cache/restore@v4
        with:
          path: ~/texlive
          key: ${{ needs.texlive-cache.outputs.cache_key }}
          fail-on-cache-miss: true
        # oes angen hwn?
        # oes!
      - name: Set PATH
        run: echo $HOME/texlive/bin/x86_64-linux >> $GITHUB_PATH
      - name: Restore cfr-lm from cache
        if: ${{ matrix.extra_needs }}
        id: clm-dev-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/nfssext/cfr-lm/keep
          key: ${{ needs.clm-dev.outputs.clm_cache_key }}
          fail-on-cache-miss: true
      - name: Run l3build fnttarg dev
        if: ${{ !cancelled() && matrix.pre_target }}
        working-directory: ${{ matrix.working_directory }}
        id: fnttarg-dev
        run: |
          module="${{ matrix.module }}"
          allan=0
          l3build fnttarg --dev || allan=1
          echo -e "build_ret_${module}=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed build output
      # run even iff previous step failed
        if: ${{ !cancelled() && steps.fnttarg-dev.outcome == 'failure' && matrix.pre_target }}
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: buildfiles-${{ matrix.module }}-dev
          path: build/fnt/*.log
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Run l3build ctan dev
        if: ${{ !cancelled() && steps.fnttarg-dev.outcome != 'failure' }}
        working-directory: ${{ matrix.working_directory }}
        id: ctan-dev
        run: |
          module="${{ matrix.module }}"
          allan=1
          # only try if clm restored ; only succeed if try successful
          [[ "${{ steps.clm-dev-restore.outputs.cache-hit }}" == "true" ]] && l3build ctan --dev && allan=0
          echo -e "ctan_ret_${module}=${allan}" >> "$GITHUB_OUTPUT"
          cat "$GITHUB_OUTPUT"
          exit $allan
      - name: Archive failed test output
      # run even if previous step failed
        if: ${{ !cancelled() }}
        uses: zauguin/l3build-failure-artifacts@v1
        with:
          name: testfiles-${{ matrix.module }}-dev
          # Decide how long to keep the test output artefact:
          retention-days: 7
      - name: Archive docs
      # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ matrix.module }}-dev
          path: ${{ matrix.working_directory }}/*.pdf
          # Decide how long to keep the test output artefact:
          retention-days: 30

  summary:
    name: summary
    # how to make this fail if the output isn't 0?
    needs: [ clm-dev, nfssext-dev, nfssext-needy-dev ]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: NFSSEXT Autochecks Summary
      # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
        env:
          fnttargclm: ${{ needs.clm-dev.outputs.fnttarg_clm_output }}
          ctanclm: ${{ needs.clm-dev.outputs.ctan_clm_output }}
          fnttargbaskervaldadf: ${{ needs.nfssext-dev.outputs.fnttarg_baskervaldadf_output }}
          fnttargberenisadf: ${{ needs.nfssext-dev.outputs.fnttarg_berenisadf_output }}
          fnttargelectrumadf: ${{ needs.nfssext-dev.outputs.fnttarg_electrumadf_output }}
          fnttarglibrisadf: ${{ needs.nfssext-dev.outputs.fnttarg_librisadf_output }}
          fnttargromandeadf: ${{ needs.nfssext-dev.outputs.fnttarg_romandeadf_output }}
          fnttargventurisadf: ${{ needs.nfssext-dev.outputs.fnttarg_venturisadf_output }}
          ctanbaskervaldadf: ${{ needs.nfssext-dev.outputs.ctan_baskervaldadf_output }}
          ctanberenisadf: ${{ needs.nfssext-dev.outputs.ctan_berenisadf_output }}
          ctanelectrumadf: ${{ needs.nfssext-dev.outputs.ctan_electrumadf_output }}
          ctanlibrisadf: ${{ needs.nfssext-dev.outputs.ctan_librisadf_output }}
          ctanromandeadf: ${{ needs.nfssext-dev.outputs.ctan_romandeadf_output }}
          ctanventurisadf: ${{ needs.nfssext-dev.outputs.ctan_venturisadf_output }}
          fnttargadforn: ${{ needs.nfssext-needy-dev.outputs.fnttarg_adforn_output }}
          fnttargadfsymbols: ${{ needs.nfssext-needy-dev.outputs.fnttarg_adfsymbols_output }}
          ctanadforn: ${{ needs.nfssext-needy-dev.outputs.ctan_adforn_output }}
          ctanadfsymbols: ${{ needs.nfssext-needy-dev.outputs.ctan_adfsymbols_output }}
          ctanfontscripts: ${{ needs.nfssext-needy-dev.outputs.ctan_fontscripts_output }}
          ctannfssextcfr: ${{ needs.nfssext-needy-dev.outputs.ctan_nfssext_cfr_output }}
        run: |
          allan=0
          ([[ $fnttargclm != 0 || $ctanclm != 0 || $fnttargbaskervaldadf != 0 || $fnttargberenisadf != 0 || $fnttargelectrumadf != 0 || $fnttarglibrisadf != 0 || $fnttargromandeadf != 0 || $fnttargventurisadf != 0 || $ctanbaskervaldadf != 0 || $ctanberenisadf != 0 || $ctanelectrumadf != 0 || $ctanlibrisadf != 0 || $ctanromandeadf != 0 || $ctanventurisadf != 0 || $fnttargadforn != 0 || $fnttargadfsymbols != 0 || $ctanadforn != 0 || $ctanadfsymbols != 0 || $ctanfontscripts != 0 || $ctannfssextcfr != 0 ]]) &&  allan=1
          exit $allan


# vim: sw=2:et:ts=2:
