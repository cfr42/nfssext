# nfssext-autochecks-dev.yml
# standard l3build testing for packages in nfssext repo with LaTeX dev format

# https://github.com/latex3/hyperref/blob/adc36adbc3650db73329469b43afb0ee86e3c807/.github/workflows/main.yaml
# https://github.com/josephwright/siunitx/blob/main/.github/workflows/main.yaml

name: Automatic Checks for nfssext with LaTeX dev

on:
  schedule: 
    - cron: '17 2 * * *'
  push:
    branches:
      - "*"
    paths:
      - '.github/workflows/nfssext-autochecks-dev.yml'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # update TL tree if needed
  texlive-cache:
    runs-on: ubuntu-latest
    name: Update TeX Live cache
    outputs: 
      cache_key: ${{ steps.texlive.outputs.cache_key }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Install TeX Live
        id: texlive
        uses: zauguin/install-texlive@v4
        with:
          # List the required TeX Live packages in a separate file to allow reuse in
          # different workflows.
          package_file: .github/tl_packages

  clm-dev:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    name: "Test build: cfr-lm dev"
    needs: texlive-cache
    # nfssext-cfr uses cfr-lm (though it falls back if built first)
    # cfr-lm uses nfssext-cfr but there's nothing to build
    outputs:
      # clm_cache_key: ${{ steps.clm-cache-dev.outputs.cache_key }}
      clm_cache_key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}-dev
      lookup_clm_output: ${{ steps.clm-lookup-dev.outputs.cache-hit }}
      fnttarg_clm_output: ${{ steps.build-clm-dev.outputs.fnttarg_ret }}
      ctan_clm_output: ${{ steps.build-clm-dev.outputs.ctan_ret }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Restore clm dev from cache
        id: clm-lookup-dev
        uses: actions/cache/restore@v4
        with:
          path: ~/work/nfssext//nfssext/cfr-lm/keep
          lookup-only: true
          fail-on-cache-miss: false
          key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}-dev
      - name: Build fnttarg and ctan
        if: ${{ !cancelled() && steps.clm-lookup-dev.outputs.cache-hit != 'true' }}
        id: build-clm-dev
        uses: ./.github/actions/nfssext-autocheck-action
        with:
          module: clm
          working_directory: cfr-lm
          pre_target: fnttarg
          texlive_cache_key: ${{ needs.texlive-cache.outputs.cache_key }}
          opts_ctan: "--dev"
      - name: Cache build results
      # run only if fnttarg build succeeded
        if: ${{ !cancelled() && steps.build-clm-dev.outputs.fnttarg_ret && steps.clm-lookup-dev.outputs.cache-hit != 'true' }}
        id: clm-cache-dev
        uses: actions/cache/save@v4
        with:
          path: ~/work/nfssext/nfssext/cfr-lm/keep
          key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}--dev
      - name: Generate exit code
        if: ${{ !cancelled() }}
        id: clm-exit-dev
        shell: bash
        env:
          clmlookup: ${{ steps.clm-lookup-dev.outputs.cache-hit }}
          clmbuildret: ${{ steps.build-clm-dev.outputs.fnttarg_ret }}
          clmcache: ${{ steps.clm-cache-dev.outcome }}
        run: |
          allan=0
          ([[ $clmlookup != 'true' ]] && [[ $clmbuildret != 0 || $clmcache == 'failure' ]]) && allan=1
          exit $allan

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # these do not depend on clm
  nfssext-dev:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: texlive-cache
    outputs:
      fnttarg_baskervaldadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_baskervaldadf }}
      fnttarg_berenisadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_berenisadf }}
      fnttarg_electrumadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_electrumadf }}
      fnttarg_librisadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_librisadf }}
      fnttarg_romandeadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_romandeadf }}
      fnttarg_venturisadf_output: ${{ steps.save-outputs-dev.outputs.build_ret_venturisadf }}
      ctan_baskervaldadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_baskervaldadf }}
      ctan_berenisadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_berenisadf }}
      ctan_electrumadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_electrumadf }}
      ctan_librisadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_librisadf }}
      ctan_romandeadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_romandeadf }}
      ctan_venturisadf_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_venturisadf }}
    # don't abandon other builds if one module fails
    # continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # include indicates that we want to set explicitly these combinations
        # and don't want full matrix testing.
        include:
          - module: baskervaldadf
            working_directory: arkandis/baskervaldadf
            pre_target: fnttarg
          - module: berenisadf
            working_directory: arkandis/berenisadf
            # berenis needs make, ff
            extra_packages: make fontforge
            pre_target: fnttarg
          - module: electrumadf
            working_directory: arkandis/electrumadf
            pre_target: fnttarg
          - module: librisadf
            working_directory: arkandis/librisadf
            pre_target: fnttarg
          - module: romandeadf
            working_directory: arkandis/romandeadf
            pre_target: fnttarg
          - module: venturisadf
            working_directory: arkandis/venturisadf
            pre_target: fnttarg
    name: "Test build: ${{ matrix.module }}"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Build fnttarg and ctan dev
        id: build-dev
        uses: ./.github/actions/nfssext-autocheck-action
        with:
          extra_packages: ${{ matrix.extra_packages }}
          module: ${{ matrix.module }}
          opts_ctan: "--dev"
          pre_target: ${{ matrix.pre_target }}
          texlive_cache_key: ${{ needs.texlive-cache.outputs.cache_key }}
          working_directory: ${{ matrix.working_directory }}
      - name: Save fnttarg and ctan build results dev
        if: ${{ !cancelled() }}
        id: save-outputs-dev
        shell: bash
        env: 
          BUILD_RET: ${{ steps.build-dev.outputs.fnttarg_ret }}
          CTAN_RET: ${{ steps.build-dev.outputs.ctan_ret }}
        run: |
          module="${{ matrix.module }}"
          echo -e "build_ret_${module}=${BUILD_RET}" >> "$GITHUB_OUTPUT" 
          echo -e "ctan_ret_${module}=${CTAN_RET}" >> "$GITHUB_OUTPUT" 
          cat "$GITHUB_OUTPUT"
          allan=0
          ([[ ${BUILD_RET} != 0  || ${CTAN_RET} != 0 ]])  && allan=1
          exit $allan

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # need cfr-lm
  nfssext-needy-dev:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [ texlive-cache, clm-dev ]
    outputs:
      fnttarg_adforn_output: ${{ steps.save-outputs-dev.outputs.build_ret_adforn }}
      fnttarg_adfsymbols_output: ${{ steps.save-outputs-dev.outputs.build_ret_adfsymbols }}
      ctan_adforn_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_adforn }}
      ctan_adfsymbols_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_adfsymbols }}
      ctan_fontscripts_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_fontscripts }}
      ctan_nfssext_cfr_output: ${{ steps.save-outputs-dev.outputs.ctan_ret_nfssext-cfr }}
    # don't abandon other builds if one module fails
    # continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # include indicates that we want to set explicitly these combinations
        # and don't want full matrix testing.
        include:
          - module: adforn
            working_directory: arkandis/adforn
            pre_target: fnttarg
            extra_needs: clm-dev
          - module: adfsymbols
            working_directory: arkandis/adfsymbols
            pre_target: fnttarg
            extra_needs: clm-dev
          - module: fontscripts
            working_directory: fontscripts
            extra_needs: clm-dev
          - module: nfssext-cfr
            working_directory: nfssext-cfr
            extra_needs: clm-dev
    name: "Test build: ${{ matrix.module }}"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
      - name: Build fnttarg and ctan dev
        id: build-dev 
        uses: ./.github/actions/nfssext-autocheck-action
        with:
          dep_cache_key: ${{ needs.clm.outputs.clm_cache_key }}
          extra_needs: ${{ matrix.extra_needs }}
          # extra_packages: ${{ matrix.extra_packages }}
          module: ${{ matrix.module }}
          opts_ctan: "--dev"
          pre_target: ${{ matrix.pre_target }}
          texlive_cache_key: ${{ needs.texlive-cache.outputs.cache_key }}
          working_directory: ${{ matrix.working_directory }}
      - name: Save fnttarg and ctan build results dev
        if: ${{ !cancelled() }}
        id: save-outputs-dev
        shell: bash
        env: 
          BUILD_RET: ${{ steps.build-dev.outputs.fnttarg_ret }}
          CTAN_RET: ${{ steps.build-dev.outputs.ctan_ret }}
        run: |
          module="${{ matrix.module }}"
          pretarget="${{ matrix.pre_target }}"
          [[ "$pretarget" != "" ]] && echo -e "build_ret_${module}=${BUILD_RET}" >> "$GITHUB_OUTPUT" 
          echo -e "ctan_ret_${module}=${CTAN_RET}" >> "$GITHUB_OUTPUT" 
          cat "$GITHUB_OUTPUT"
          allan=0
          [[ ${CTAN_RET} != 0 ]] && allan=1
          [[ ${BUILD_RET} != 0  && "$pretarget" != "" ]]  && allan=1
          exit $allan

  summary:
    name: nfssext summary dev
    needs: [ clm-dev, nfssext-dev, nfssext-needy-dev ]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: nfssext autochecks summary dev
      # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
        env:
          fnttargclm: ${{ needs.clm-dev.outputs.fnttarg_clm_output }}
          ctanclm: ${{ needs.clm-dev.outputs.ctan_clm_output }}
          lookupclm: ${{ needs.clm-dev.outputs.lookup_clm_output }}
          fnttargbaskervaldadf: ${{ needs.nfssext-dev.outputs.fnttarg_baskervaldadf_output }}
          fnttargberenisadf: ${{ needs.nfssext-dev.outputs.fnttarg_berenisadf_output }}
          fnttargelectrumadf: ${{ needs.nfssext-dev.outputs.fnttarg_electrumadf_output }}
          fnttarglibrisadf: ${{ needs.nfssext-dev.outputs.fnttarg_librisadf_output }}
          fnttargromandeadf: ${{ needs.nfssext-dev.outputs.fnttarg_romandeadf_output }}
          fnttargventurisadf: ${{ needs.nfssext-dev.outputs.fnttarg_venturisadf_output }}
          ctanbaskervaldadf: ${{ needs.nfssext-dev.outputs.ctan_baskervaldadf_output }}
          ctanberenisadf: ${{ needs.nfssext-dev.outputs.ctan_berenisadf_output }}
          ctanelectrumadf: ${{ needs.nfssext-dev.outputs.ctan_electrumadf_output }}
          ctanlibrisadf: ${{ needs.nfssext-dev.outputs.ctan_librisadf_output }}
          ctanromandeadf: ${{ needs.nfssext-dev.outputs.ctan_romandeadf_output }}
          ctanventurisadf: ${{ needs.nfssext-dev.outputs.ctan_venturisadf_output }}
          fnttargadforn: ${{ needs.nfssext-needy-dev.outputs.fnttarg_adforn_output }}
          fnttargadfsymbols: ${{ needs.nfssext-needy-dev.outputs.fnttarg_adfsymbols_output }}
          ctanadforn: ${{ needs.nfssext-needy-dev.outputs.ctan_adforn_output }}
          ctanadfsymbols: ${{ needs.nfssext-needy-dev.outputs.ctan_adfsymbols_output }}
          ctanfontscripts: ${{ needs.nfssext-needy-dev.outputs.ctan_fontscripts_output }}
          ctannfssextcfr: ${{ needs.nfssext-needy-dev.outputs.ctan_nfssext_cfr_output }}
        run: |
          allan=0
          clmres=1
          [[ $lookupclm == 'true' ]] && clmres=0
          [[ $fnttargclm == 0 && $ctanclm == 0 ]] && clmres=0
          # ([[ $clmres != 0 || $fnttargbaskervaldadf != 0 || $fnttargberenisadf != 0 || $fnttargelectrumadf != 0 || $fnttarglibrisadf != 0 || $fnttargromandeadf != 0 || $fnttargventurisadf != 0 || $ctanbaskervaldadf != 0 || $ctanberenisadf != 0 || $ctanelectrumadf != 0 || $ctanlibrisadf != 0 || $ctanromandeadf != 0 || $ctanventurisadf != 0 ]]) && allan=1
          ([[ $clmres != 0 || $fnttargbaskervaldadf != 0 || $fnttargberenisadf != 0 || $fnttargelectrumadf != 0 || $fnttarglibrisadf != 0 || $fnttargromandeadf != 0 || $fnttargventurisadf != 0 || $ctanbaskervaldadf != 0 || $ctanberenisadf != 0 || $ctanelectrumadf != 0 || $ctanlibrisadf != 0 || $ctanromandeadf != 0 || $ctanventurisadf != 0 || $fnttargadforn != 0 || $fnttargadfsymbols != 0 || $ctanadforn != 0 || $ctanadfsymbols != 0 || $ctanfontscripts != 0 || $ctannfssextcfr != 0 ]]) && allan=1
          echo "Summary status dev: $allan"
          echo -e "BUILD_RET=${allan}" >> "$GITHUB_OUTPUT" 
          exit "$allan"


# vim: sw=2:et:ts=2:
