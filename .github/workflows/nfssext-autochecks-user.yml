# nfssext-autochecks-user.yml
# standard l3build testing for packages in nfssext repo

# https://github.com/latex3/hyperref/blob/adc36adbc3650db73329469b43afb0ee86e3c807/.github/workflows/main.yaml
# https://github.com/josephwright/siunitx/blob/main/.github/workflows/main.yaml

name: Automatic Checks for nfssext 2

# Controls when the workflow will run
on:
  # Triggers the workflow on push request events for all branches if changes are not confined to excluded paths
  push:
    branches: 
      # - "*"
      # - "*workflow"
      - '*'
    paths:
      - '**'
      - '!**.md'
      - '!**.txt'
      - '!.github/workflows/*.yml'
      - '!.github/actions/**'
      - '.github/workflows/nfssext-autochecks-user.yml'
      - '.github/actions/nfssext-autocheck-action/**'
      - '!licences/**'
      - '!test/**'
  # Triggers the workflow on pull request events for all branches
  pull_request:
    branches: 
      - "*"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # update TL tree if needed
  texlive-cache:
    runs-on: ubuntu-latest
    name: Update TeX Live cache
    outputs: 
      cache_key: ${{ steps.texlive.outputs.cache_key }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install TeX Live
        id: texlive
        uses: zauguin/install-texlive@v4
        with:
          # List the required TeX Live packages in a separate file to allow reuse in
          # different workflows.
          package_file: .github/tl_packages

  clm:
    if: ${{ !cancelled() }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "Test build: cfr-lm"
    needs: texlive-cache
    # nfssext-cfr uses cfr-lm (though it falls back if built first)
    # cfr-lm uses nfssext-cfr but there's nothing to build
    outputs:
      clm_cache_key: $(( steps.clm-cache.outputs.cache_key }}
      fnttarg_clm_output: ${{ steps.build-clm.outputs.fnttarg_ret }}
      ctan_clm_output: ${{ steps.build-clm.outputs.ctan_ret }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Build fnttarg and ctan
        id: build-clm 
        uses: ./.github/actions/nfssext-autocheck-action
        with:
          module: clm
          working_directory: cfr-lm
          pre_target: fnttarg
          texlive_cache_key: ${{ needs.texlive-cache.outputs.cache_key }}
      # - name: Save fnttarg and ctan build results
      #   if: ${{ !cancelled() }}
      #   id: save-outputs
      #   shell: bash
      #   env: 
      #     BUILD_RET: ${{ steps.build-clm.outputs.fnttarg_ret }}
      #     CTAN_RET: ${{ steps.build-clm.outputs.ctan_ret }}
      #   run: |
      #     module="clm"
      #     echo -e "build_ret_${module}=${BUILD_RET}" >> "$GITHUB_OUTPUT" 
      #     echo -e "ctan_ret_${module}=${CTAN_RET}" >> "$GITHUB_OUTPUT" 
      #     cat "$GITHUB_OUTPUT"
      #     allan=0
      #     ([[ ${BUILD_RET} != 0  || ${CTAN_RET} != 0 ]])  && allan=1
      #     exit $allan
      #     - name: Run l3build install 
      #     # run only if ctan succeeded
      #       if: ${{ !cancelled() && steps.ctan-clm.outcome == 'success' }}
      #       working-directory: cfr-lm
      #       id: install-clm
      #       run: |
      #         allan=0
      #         l3build install || allan=1
      #         echo "INSTALL_RET=${allan}" >> "$GITHUB_OUTPUT" 
      #         cat "$GITHUB_OUTPUT"
      #         exit $allan
      #     - name: Update map
      #     # run only if install succeeded
      #       if: ${{ !cancelled() && (steps.install-clm.outputs.INSTALL_RET) }}
      #       id: updmap-clm
      #       run: |
      #         allan=0
      #         updmap --user --enable Map=clm.map || allan=1
      #         echo "UPDMAP_RET=${allan}" >> "$GITHUB_OUTPUT" 
      #         cat "$GITHUB_OUTPUT"
      #         exit $allan
      #     - name: Debug info
      #     # run only if updmap succeeded
      #       if: ${{ !cancelled() && (steps.updmap-clm.outputs.UPDMAP_RET) }}
      #       run: |
      #         ls -R ~/.texlive ~/texmf ~/work/nfssext/nfssext/cfr-lm/keep
      #         kpsewhich clm.map
      - name: Cache build results
      # run only if fnttarg build succeeded
        if: ${{ !cancelled() && (steps.build-clm.outputs.fnttarg_ret) }}
        id: clm-cache
        uses: actions/cache/save@v4
        with:
          path: ~/work/nfssext/nfssext/cfr-lm/keep
          key: clm-${{ github.sha }}-${{ needs.texlive-cache.outputs.cache_key }}
      #     # - name: Info
      #     #   run: cat ~/.texlive/texmf-var/web2c/updmap.log


  # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # these do not depend on clm
  nfssext:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: texlive-cache
    outputs:
      fnttarg_baskervaldadf_output: ${{ steps.save-outputs.outputs.build_ret_baskervaldadf }}
      fnttarg_berenisadf_output: ${{ steps.save-outputs.outputs.build_ret_berenisadf }}
      fnttarg_electrumadf_output: ${{ steps.save-outputs.outputs.build_ret_electrumadf }}
      fnttarg_librisadf_output: ${{ steps.save-outputs.outputs.build_ret_librisadf }}
      fnttarg_romandeadf_output: ${{ steps.save-outputs.outputs.build_ret_romandeadf }}
      fnttarg_venturisadf_output: ${{ steps.save-outputs.outputs.build_ret_venturisadf }}
      ctan_baskervaldadf_output: ${{ steps.save-outputs.outputs.ctan_ret_baskervaldadf }}
      ctan_berenisadf_output: ${{ steps.save-outputs.outputs.ctan_ret_berenisadf }}
      ctan_electrumadf_output: ${{ steps.save-outputs.outputs.ctan_ret_electrumadf }}
      ctan_librisadf_output: ${{ steps.save-outputs.outputs.ctan_ret_librisadf }}
      ctan_romandeadf_output: ${{ steps.save-outputs.outputs.ctan_ret_romandeadf }}
      ctan_venturisadf_output: ${{ steps.save-outputs.outputs.ctan_ret_venturisadf }}
    # don't abandon other builds if one module fails
    # continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # include indicates that we want to set explicitly these combinations
        # and don't want full matrix testing.
        include:
          - module: baskervaldadf
            working_directory: arkandis/baskervaldadf
            pre_target: fnttarg
          - module: berenisadf
            working_directory: arkandis/berenisadf
            # berenis needs make, ff
            extra_packages: make fontforge
            pre_target: fnttarg
          - module: electrumadf
            working_directory: arkandis/electrumadf
            pre_target: fnttarg
          - module: librisadf
            working_directory: arkandis/librisadf
            pre_target: fnttarg
          - module: romandeadf
            working_directory: arkandis/romandeadf
            pre_target: fnttarg
          - module: venturisadf
            working_directory: arkandis/venturisadf
            pre_target: fnttarg
    name: "Test build: ${{ matrix.module }}"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Build fnttarg and ctan
        id: build 
        uses: ./.github/actions/nfssext-autocheck-action
        with:
          module: ${{ matrix.module }}
          working_directory: ${{ matrix.working_directory }}
          pre_target: ${{ matrix.pre_target }}
          extra_packages: ${{ matrix.extra_packages }}
          texlive_cache_key: ${{ needs.texlive-cache.outputs.cache_key }}
      - name: Save fnttarg and ctan build results
        if: ${{ !cancelled() }}
        id: save-outputs
        shell: bash
        env: 
          BUILD_RET: ${{ steps.build.outputs.fnttarg_ret }}
          CTAN_RET: ${{ steps.build.outputs.ctan_ret }}
        run: |
          module="${{ matrix.module }}"
          echo -e "build_ret_${module}=${BUILD_RET}" >> "$GITHUB_OUTPUT" 
          echo -e "ctan_ret_${module}=${CTAN_RET}" >> "$GITHUB_OUTPUT" 
          cat "$GITHUB_OUTPUT"
          allan=0
          ([[ ${BUILD_RET} != 0  || ${CTAN_RET} != 0 ]])  && allan=1
          exit $allan

  # # addaswyd o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  # # need cfr-lm
  # # we don't really need the variable doing it in a separate matrix ...
  # # but leave for now as may be useful
  # nfssext-needy:
  #   if: ${{ !cancelled() }}
  #   runs-on: ubuntu-latest
  #   needs: [ texlive-cache, clm ]
  #   outputs:
  #     fnttarg_adforn_output: ${{ steps.fnttarg.outputs.build_ret_adforn }}
  #     fnttarg_adfsymbols_output: ${{ steps.fnttarg.outputs.build_ret_adfsymbols }}
  #     ctan_adforn_output: ${{ steps.ctan.outputs.ctan_ret_adforn }}
  #     ctan_adfsymbols_output: ${{ steps.ctan.outputs.ctan_ret_adfsymbols }}
  #     ctan_fontscripts_output: ${{ steps.ctan.outputs.ctan_ret_fontscripts }}
  #     ctan_nfssext_cfr_output: ${{ steps.ctan.outputs.ctan_ret_nfssext-cfr }}
  #   # don't abandon other builds if one module fails
  #   # continue-on-error: true
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       # include indicates that we want to set explicitly these combinations
  #       # and don't want full matrix testing.
  #       include:
  #         - module: adforn
  #           working_directory: arkandis/adforn
  #           pre_target: fnttarg
  #           extra_needs: clm
  #         - module: adfsymbols
  #           working_directory: arkandis/adfsymbols
  #           pre_target: fnttarg
  #           extra_needs: clm
  #         - module: fontscripts
  #           working_directory: fontscripts
  #           extra_needs: clm
  #         - module: nfssext-cfr
  #           working_directory: nfssext-cfr
  #           extra_needs: clm
  #   name: "Test build: ${{ matrix.module }}"
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  #     # https://github.com/josephwright/siunitx/blob/549cad913591b92a3a199b7477a325866303bf29/.github/workflows/main.yaml
  #     # We need Ghostscript for XeTeX tests.
  #     - name: Update system 
  #       run: sudo apt-get update
  #     - name: Install additional packages if needed
  #       if: ${{ matrix.extra_packages }}
  #       run: sudo apt-get install ${{ matrix.extra_packages }}
  #     - name: Restore TeX Live from cache
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: ~/texlive
  #         key: ${{ needs.texlive-cache.outputs.cache_key }}
  #         fail-on-cache-miss: true
  #       # oes angen hwn?
  #       # oes!
  #     - name: Set PATH
  #       run: echo $HOME/texlive/bin/x86_64-linux >> $GITHUB_PATH
  #     - name: Restore cfr-lm from cache
  #       if: ${{ matrix.extra_needs }}
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: ~/work/nfssext/nfssext/cfr-lm/keep
  #         key: clm-${{ github.sha }}
  #         fail-on-cache-miss: true
  #     # - name: Update map
  #     #   id: updmap-clm
  #     #   run: |
  #     #     (updmap --user --enable Map=clm.map && echo "UPDMAP_RET=0" >> "$GITHUB_OUTPUT") || echo "UPDMAP_RET=1" >> "GITHUB_OUTPUT"
  #     #     cat "$GITHUB_OUTPUT"
  #     # - name: Debug info
  #     #   run: |
  #     #     ls -R ~/.texlive ~/texmf ~/work/nfssext/nfssext/cfr-lm/keep
  #     #     kpsewhich clm.map
  #     - name: Run l3build fnttarg
  #       if: ${{ matrix.pre_target }}
  #       working-directory: ${{ matrix.working_directory }}
  #       id: fnttarg
  #       run: |
  #         module="${{ matrix.module }}"
  #         allan=0
  #         l3build fnttarg || allan=1
  #         echo -e "BUILD_RET=${allan}\nbuild_ret_${module}=${allan}" >> "$GITHUB_OUTPUT" 
  #         cat "$GITHUB_OUTPUT"
  #         exit $allan
  #     - name: Archive failed build output
  #     # run even iff previous step failed
  #       if: ${{ !cancelled() && !(steps.fnttarg.outputs.BUILD_RET) && matrix.pre_target }}
  #     # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: buildfiles-${{ matrix.module }}
  #         path: build/fnt/*.log
  #         # Decide how long to keep the test output artefact:
  #         retention-days: 7
  #     - name: Run l3build
  #       working-directory: ${{ matrix.working_directory }}
  #       id: ctan
  #       run: |
  #         module="${{ matrix.module }}"
  #         allan=0
  #         l3build ctan || allan=1
  #         echo -e "CTAN_RET=${allan}\nctan_ret_${module}=${allan}" >> "$GITHUB_OUTPUT" 
  #         cat "$GITHUB_OUTPUT"
  #         exit "$allan"
  #     - name: Archive failed test output
  #     # run even if previous step failed
  #       if: ${{ !cancelled() }}
  #       uses: zauguin/l3build-failure-artifacts@v1
  #       with:
  #         name: testfiles-${{ matrix.module }}
  #         # Decide how long to keep the test output artefact:
  #         retention-days: 7
  #     # - name: Retrieve ctan build result
  #     #   if: ${{ !cancelled() }}
  #     # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
  #       # env:
  #       #   CTAN_RET: ${{ steps.ctan.outputs.CTAN_RET }}
  #       #   https://docs.github.com/en/actions/reference/accessing-contextual-information-about-workflow-runs#steps-context
  #       # id: retrieve
  #       # run: |
  #       #   if [[ ${{ steps.ctan.outputs.CTAN_RET }} != 0 ]]; then exit 1; else exit 0; fi
  #     - name: Archive failed docs output
  #     # run even iff previous step failed
  #     # https://docs.github.com/en/actions/reference/evaluate-expressions-in-workflows-and-actions#status-check-functions
  #       # if: ${{ !cancelled() && steps.retrieve.outcome == 'failure' }}
  #       if: ${{ !cancelled() && steps.ctan.outcome == 'failure' }}
  #       # if: ${{ !cancelled() && !(steps.ctan.outputs.CTAN_RET) && matrix.pre_target }}
  #       # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#environment-files
  #       # https://docs.github.com/en/actions/how-tos/writing-workflows/choosing-when-your-workflow-runs/using-conditions-to-control-job-execution
  #     # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: typeset-logs-${{ matrix.module }}
  #         path: build/doc/*.log
  #         # Decide how long to keep the test output artefact:
  #         retention-days: 7
  #     - name: Archive docs
  #     # dwyn o https://github.com/latex3/latex2e/blob/develop/.github/workflows/main.yaml
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: docs-${{ matrix.module }}
  #         path: ${{ matrix.working_directory }}/*.pdf
  #         # Decide how long to keep the test output artefact:
  #         retention-days: 30

  summary:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [ clm, nfssext ] #    [ clm, nfssext, nfssext-needy ]
    name: nfssext summary
    steps:
      - name: nfssext autochecks summary
        shell: bash
        # https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
        env:
          fnttargclm: ${{ needs.clm.outputs.fnttarg_clm_output }}
          ctanclm: ${{ needs.clm.outputs.ctan_clm_output }}
          fnttargbaskervaldadf: ${{ needs.nfssext.outputs.fnttarg_baskervaldadf_output }}
          fnttargberenisadf: ${{ needs.nfssext.outputs.fnttarg_berenisadf_output }}
          fnttargelectrumadf: ${{ needs.nfssext.outputs.fnttarg_electrumadf_output }}
          fnttarglibrisadf: ${{ needs.nfssext.outputs.fnttarg_librisadf_output }}
          fnttargromandeadf: ${{ needs.nfssext.outputs.fnttarg_romandeadf_output }}
          fnttargventurisadf: ${{ needs.nfssext.outputs.fnttarg_venturisadf_output }}
          ctanbaskervaldadf: ${{ needs.nfssext.outputs.ctan_baskervaldadf_output }}
          ctanberenisadf: ${{ needs.nfssext.outputs.ctan_berenisadf_output }}
          ctanelectrumadf: ${{ needs.nfssext.outputs.ctan_electrumadf_output }}
          ctanlibrisadf: ${{ needs.nfssext.outputs.ctan_librisadf_output }}
          ctanromandeadf: ${{ needs.nfssext.outputs.ctan_romandeadf_output }}
          ctanventurisadf: ${{ needs.nfssext.outputs.ctan_venturisadf_output }}
          #         fnttargadforn: ${{ needs.nfssext-needy.outputs.fnttarg_adforn_output }}
          #         fnttargadfsymbols: ${{ needs.nfssext-needy.outputs.fnttarg_adfsymbols_output }}
          #         ctanadforn: ${{ needs.nfssext-needy.outputs.ctan_adforn_output }}
          #         ctanadfsymbols: ${{ needs.nfssext-needy.outputs.ctan_adfsymbols_output }}
          #         ctanfontscripts: ${{ needs.nfssext-needy.outputs.ctan_fontscripts_output }}
          #         ctannfssextcfr: ${{ needs.nfssext-needy.outputs.ctan_nfssext_cfr_output }}
        run: |
          allan=0
          ([[ $fnttargclm != 0 || $ctanclm != 0 || $fnttargbaskervaldadf != 0 || $fnttargberenisadf != 0 || $fnttargelectrumadf != 0 || $fnttarglibrisadf != 0 || $fnttargromandeadf != 0 || $fnttargventurisadf != 0 || $ctanbaskervaldadf != 0 || $ctanberenisadf != 0 || $ctanelectrumadf != 0 || $ctanlibrisadf != 0 || $ctanromandeadf != 0 || $ctanventurisadf != 0 ]]) && allan=1
          #         ([[ $fnttargclm != 0 || $ctanclm != 0 || $fnttargbaskervaldadf != 0 || $fnttargberenisadf != 0 || $fnttargelectrumadf != 0 || $fnttarglibrisadf != 0 || $fnttargromandeadf != 0 || $fnttargventurisadf != 0 || $ctanbaskervaldadf != 0 || $ctanberenisadf != 0 || $ctanelectrumadf != 0 || $ctanlibrisadf != 0 || $ctanromandeadf != 0 || $ctanventurisadf != 0 || $fnttargadforn != 0 || $fnttargadfsymbols != 0 || $ctanadforn != 0 || $ctanadfsymbols != 0 || $ctanfontscripts != 0 || $ctannfssextcfr != 0 ]]) && allan=1
          echo "Summary status: $allan"
          echo -e "BUILD_RET=${allan}" >> "$GITHUB_OUTPUT" 
          exit "$allan"


# vim: sw=2:et:ts=2:
